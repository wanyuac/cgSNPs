#!/bin/bash
#PBS -lselect=1:ncpus=4:mem=16gb:ompthreads=4
#PBS -lwalltime=24:00:00
#PBS -N read_mapping
#PBS -j oe
#
# This pipeline implements basic read mapping against a reference genome, variant calling, and generation of depth plots
# for heterozygous SNPs. Every step is optional. Execution of this script requires PBS job scheduling system and users may
# need to customise PBS parameters in this script for their system. Outputs are saved under the directory where users
# submit their jobs.
#
# Parameters
#   One parameter c: A configuration file
#   PBS environment variables: PBS_O_WORKDIR, NCPUS
#   Other variables are defined in the configuration file specified by parameter c
#
# Dependencies: bowtie2, bcftools, vcftools, and Rscript.
#
# Example command: qsub -v c=read_mapping.config read_mapping.pbs
#
# Copyright (C) 2020 Yu Wan <wanyuac@126.com>
# Licensed under the GNU General Public Licence version 3 (GPLv3) <https://www.gnu.org/licenses/>.
# Release: 17 Aug 2020; latest update: 18 Aug 2020

cd $PBS_O_WORKDIR

##### Execute the configuration file to read parameters, which are set before submitting this job #####
# This block also loads prerequsite modules when they are specified in the configuration file.
if [ -z "$c" ]  # Argument c can be a path relative to the current working directory
then
    echo 'Exit, as the mandatory configuration file is not provided.'
    exit 0
elif [ -f "$c" ]
then
    echo "Reading configurations from file ${c}."
    source $c  # Read user's configurations
else
    echo "Cannot find the configuration file ${c}."
    exit 0
fi

##### Load environmental modules #####
# Code in this block is platform-specific. Please modify the code for your system.
if [ ! -z "$MODULE" ] && [ ! -z "${CONDA_ENV}" ]
then
    echo Activate conda environment $CONDA_ENV through module $MODULE
    module load $MODULE
    if [ $CONDA_ACTIVATE_METHOD = 'source' ]
    then
        source activate $CONDA_ENV  # Customisation: some systems use this command to activate an environment
    else
        conda activate $CONDA_ENV
    fi
fi

##### Print arguments for subsequent STEPS #####
echo 'Arguments for this pipeline:'
echo "  Reference file: ${REF}"
echo "  Read directory: ${READ_DIR}"
echo "  Exclusion regions: ${EXCL}"
echo "  MIN_BASE_QUAL: ${MIN_BASE_QUAL}"
echo "  MIN_MAPPING_QUAL: ${MIN_MAPPING_QUAL}"
echo "  PLOIDY: $PLOIDY"
echo "  MIN_DP: ${MIN_DP}"
echo "  MIN_QUAL: ${MIN_QUAL}"
echo "  MIN_MQ: ${MIN_MQ}"

##### Read the step specification from argument $STEPS #####
map_reads=false
call_variants=false
plot_hetSNPs=false

for i in "${STEPS[@]}"
do
    if [ "$i" -eq 1 ]
    then
        map_reads=true
    elif [ "$i" -eq 2 ]
    then
        call_variants=true
    elif [ "$i" -eq 3 ]
    then
        plot_hetSNPs=true
    else
        echo Argument error: step specification is invalid.
        exit 0
    fi
done

##### Prepare the reference genome for read mapping and variant calling #####
r=`basename $REF $REF_EXT`  # Get the name of the reference genome via removing directory path and filename extension from the input path
echo Name of the reference genome: $r

# Build index files of the reference genome
# Do not use 'ls -1 *.bt2' or "ls -1 *.* | grep -c '.bt2'" as they return an error when index files do not exist (the former command)
# or no file exists (the latter command), making the indexing process fail.
if [ ! -f ${r}.1.bt2 ]  # Command "-f *.bt2" returns an error of "too many arguments" when all the bt2 file exist.
then
    echo "Build index files for ${REF}"
    bowtie2-build -f $REF $r
else
    echo Index files of $REF exist.
fi

##### Read mapping with Bowtie 2 #####
if [ "$map_reads" = true ]
then
    echo 'Start to map reads against a reference genome.'
    
    # Set default read directory when paramter READ_DIR is not specified
    if [ -z "$READ_DIR" ]
    then
        echo 'No read directory is set. The default path . is loaded.'
        READ_DIR='.'
    fi

    # Go through each sample
    for s in ${SAMPLES[@]}
    do
        echo "Mapping reads of $s to reference $r"
        prefix=${s}_${r}  # Common filename prefix of output files
        # About read mapping and BAM sorting:
        #   Use local alignment of reads (soft clip) to avoid low-quality ends or adapter ends.
        #   Argument selection used by RedDog pipeline was taken into account.
        #   Do not use option --no-discordant as I aim to detect structural variants.
        # quinlanlab.org/tutorials/samtools/samtools.html; bowtie-bio.sourceforge.net/bowtie2/manual.shtml
        # www.chenlianfu.com/?p=178; www.chenlianfu.com/?p=1399
        # Output: *.bam
        bowtie2 -q --phred33 --local --sensitive-local -X 2000 --fr --no-mixed --threads $NCPUS -x $r -1 ${READ_DIR}/${s}_1.fastq.gz -2 ${READ_DIR}/${s}_2.fastq.gz | samtools view -S -b -u -@ $NCPUS - | samtools sort -@ $NCPUS -o ${prefix}_sorted.bam -

        # Index BAM for visualisation in IGV
        samtools index -@ $NCPUS ${prefix}_sorted.bam
        echo 'Read mapping is successfully finished.'
    done
else
    echo 'Skipped the mapping process as specified.'
fi

##### Call variants #####
if [ "$call_variants" = true ]
then
    echo 'Start to call variants from the sorted BAM file'

    for s in ${SAMPLES[@]}
    do
        echo "Call variants for genome $s against reference $r"
        prefix=${s}_${r}
        # Call variants from the sorted BAM file and produce a BCF file. Output: *.bcf
        # Bacteria are haploid organisms, whereas bcftools assumes the sample organism is diploid by default.
        if [ $PLOIDY -eq 1 ]
        then
            bcftools mpileup --threads $NCPUS -Q ${MIN_BASE_QUAL} -q ${MIN_MAPPING_QUAL} -f $REF ${prefix}_sorted.bam | bcftools call --threads $NCPUS --ploidy 1 -m -v -Ou | bcftools +fill-tags -Ou -o ${prefix}_sorted.bcf -- -t 'AF,AC,AN'
        else
            bcftools mpileup --threads $NCPUS -Q ${MIN_BASE_QUAL} -q ${MIN_MAPPING_QUAL} -f $REF ${prefix}_sorted.bam | bcftools call --threads $NCPUS -m -v -Ou | bcftools +fill-tags -Ou -o ${prefix}_sorted.bcf -- -t 'AF,AC,AN'
        fi

        # Filter variants (quality checked) and index the compressed VCF. Output: *.vcf.gz
        # Although snpEff expects input of a plain VCF file, tabix only takes as input a compressed VCF file. (An error arises otherwise)
        # Use "bgzip -d" to decompress *.vcf.gz
        if [ -z "$EXCL" ]
        then
            bcftools view --threads $NCPUS -i "DP>=${MIN_DP} & QUAL>=${MIN_QUAL} & MQ>=${MIN_MQ}" -Oz -o ${prefix}_sorted_qual.vcf.gz ${prefix}_sorted.bcf
        else
            bcftools view --threads $NCPUS -i "DP>=${MIN_DP} & QUAL>=${MIN_QUAL} & MQ>=${MIN_MQ}" -T ^$EXCL -Oz -o ${prefix}_sorted_qual.vcf.gz ${prefix}_sorted.bcf
        fi

        # Index the vcf.gz file for visualisation in Artemis
        tabix -p vcf ${prefix}_sorted_qual.vcf.gz
        echo 'Variant calling is successfully finished.'
    done
else
    echo 'Skipped variant calling as specified.'
fi

if [ "$plot_hetSNPs" = true ]
then
    for s in ${SAMPLES[@]}
    do
        echo "Plot read depths of SNPs from genome $s"
        prefix=${s}_${r}

        # Extract homozygous and heterozygous SNPs from a bcf file
        bcftools view --threads $NCPUS -i "AF==1" -v snps -Oz -o ${prefix}_sorted_qual_homSNPs.vcf.gz ${prefix}_sorted_qual.vcf.gz  # Homozygous SNPs
        bcftools view --threads $NCPUS -i "AF<1" -v snps -Oz -o ${prefix}_sorted_qual_hetSNPs.vcf.gz ${prefix}_sorted_qual.vcf.gz  # Heterozygous SNPs

        # Extract positions and read depths of SNPs from the compressed VCF file (using the method in extractInfoFromVCF.sh)
        vcftools --gzvcf ${prefix}_sorted_qual_homSNPs.vcf.gz --get-INFO DP --get-INFO DP4 --stdout > ${prefix}_sorted_qual_homSNPs_DPs.tsv
        vcftools --gzvcf ${prefix}_sorted_qual_hetSNPs.vcf.gz --get-INFO DP --get-INFO DP4 --stdout > ${prefix}_sorted_qual_hetSNPs_DPs.tsv

        # Generate a depth plot for the current sample
        Rscript ${SCRIPT_PATH}/hetSNP_depthPlot.R --hetSNP ${prefix}_sorted_qual_hetSNPs_DPs.tsv --homSNP ${prefix}_sorted_qual_homSNPs_DPs.tsv --sampleName $prefix --genomeLen $REF_LEN --outdir $PWD --suffix DP4
    done
else
    echo "Skipped plotting heterozygous SNPs as specified."
fi
